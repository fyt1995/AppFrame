package com.appframe.utils;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.List;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.w3c.dom.Document;import org.xml.sax.SAXException;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Bitmap.CompressFormat;import android.util.Log;/** * File tools * @author Arvin * */public class FileUtil {	/**	 * 单例	 */	private static FileUtil instance = null;		public static FileUtil getInstance() {  		if (instance == null) {  			instance = new FileUtil();  		}  		return instance;      }		/**	 * 构造函数	 */	private FileUtil() { } 		/*******************文件读写操作********************/	/**	 * 读取asset文件， 返回InputStream	 * @param context	 * @param path	 * @return	 */    public static InputStream readFileByAssets(Context context, String path){    	InputStream is = null;    			try {			is = context.getAssets().open(path);		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}    	return is;    }		/**	 * txt文件读写	 * @param context	 * @param fileName	 * @param symbol 分隔符	 * @return	 */	public static String readFileByAssets1(Context context, String fileName, String symbol){		String Result = null;		try { 			InputStream mInputStream = readFileByAssets(context, fileName);						if (mInputStream == null) return Result;						InputStreamReader mInputStreamReader = new InputStreamReader(mInputStream);			            BufferedReader mBufferedReader = new BufferedReader(mInputStreamReader);                        String line="";                        while((line = mBufferedReader.readLine()) != null)                Result += line + symbol;                        mInputStreamReader.close();            mBufferedReader.close();                    } catch (Exception e) {             e.printStackTrace();             Result = null;        }				return Result;	} 		/**	 * 获取raw下文件	 * @param mContext	 * @param fileName	 * @param raw	 * @return	 */	public String readFileByRaw(Context mContext, String fileName, int raw){          String result ="";          try {              InputStream stream = mContext.getResources().openRawResource(raw);               result = stream.toString();                          stream.close();          } catch (IOException e) {              // TODO Auto-generated catch block              e.printStackTrace();          }          return result;      }      	/**	 * 根据编码获取assets的文件	 * @param mContext	 * @param fileName	 * @param ENCODING UTF-8	 * @return	 */    public String readFileByAssets_Encoding1(Context mContext, String fileName, String ENCODING){          String result ="";          try {              InputStream stream = readFileByAssets(mContext, fileName);              int len = stream.available();              byte[] bytes = new byte[len];              stream.read(bytes);                          result = new String(bytes, ENCODING);              stream.close();          } catch (IOException e) {              // TODO Auto-generated catch block              e.printStackTrace();          }          return result;      }		/**	 * 从Assets中读取图片	 * @param fileName :	Cat_Blink/cat_blink0000.png	 * @return	 */	public static Bitmap getImageFromAssetsFile(Context context, String fileName) {		if (fileName == null) return null;		        Bitmap mBitmap = null;                InputStream is = readFileByAssets(context, fileName);        mBitmap = BitmapFactory.decodeStream(is);		try {            if (is != null)            	is.close();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}        return mBitmap;    }	 	/**	 * 根据file路径读取文件	 * @param path	 * @return	 */	public static String readFileByPath(String path){		StringBuffer sb = new StringBuffer();				File file = new File(path);				try {			InputStreamReader isr = new InputStreamReader(new FileInputStream(file), "UTF-8");			BufferedReader br = new BufferedReader(isr);			String line = "";						while((line = br.readLine())!=null){				sb.append(line);			}						br.close();					} catch (FileNotFoundException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}				return sb.toString();	}					/*********************图片读写***********************/		/**	 * 保存图片	 * @param bitmap	 * @param path	 * @param format jpg,png...	 * @return	 */	public static boolean saveFileForImage(Bitmap bitmap, String path, CompressFormat mCompressFormat){		boolean isSuccess = false;				String folder = getFileNameByEx(path);				FileUtil.addFile(folder);				FileOutputStream b = null;		         try {			b = new FileOutputStream(path);						bitmap.compress(mCompressFormat, 100, b);						isSuccess = true;		} catch (FileNotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{        	try {				b.flush();				b.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}        }                return isSuccess;	}		/**	 * 获取文件扩展名 	 * @param filename	 * @return	 */	public static String getExtensionName(String filename) {    	    if ((filename != null) && (filename.length() > 0)) {    	        int dot = filename.lastIndexOf('.');    	        if ((dot >-1) && (dot < (filename.length() - 1))) {    	            return filename.substring(dot + 1);    	        }    	    }    	    return filename;    	}   		/**	 * Java文件操作 获取不带扩展名的文件名 	 * @param filename	 * @return	 */	public static String getFileNameByEx(String filename) {    	    if ((filename != null) && (filename.length() > 0)) {    	        int dot = filename.lastIndexOf(".");    	        if ((dot >-1) && (dot < (filename.length()))) {    	            return filename.substring(0, dot);    	        }    	    }    	    return filename;    	}  		public static Document readDocumenuByAssets1(Context context, String path){		InputStream is = readFileByAssets(context, path);				DocumentBuilderFactory factory = null;		        DocumentBuilder builder=null;                factory = DocumentBuilderFactory.newInstance();        try {			builder = factory.newDocumentBuilder();		} catch (ParserConfigurationException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}                Document document=null;                try {			document = builder.parse(is);		} catch (SAXException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}                return document;	}		/**	 * 保存文件	 * @param val	 * @param name	 * @param path	 * @return	 */	public static int saveFileByTxt(String val, String path){		try {			//创建文件夹			creatFolder(path);			File file = new File(path);			if (!file.exists())				file.createNewFile();			FileOutputStream outStream = new FileOutputStream(path, true);			OutputStreamWriter writer = new OutputStreamWriter(outStream, "utf-8");			writer.write(val);			writer.write("/n");			writer.flush();			writer.close();//记得关闭			outStream.close();		} 		catch (Exception e){			Log.e("m", "file write error");			return 0;		} 				return 1;	}		/**	 * 判断文件是否存在	 * @param 文件在本地的完整名	 * @return	 */	public static boolean judgeExists(String fullName) {		File file = new File(fullName);		return file.exists();	}	/**	 * 获取最后的‘/’后的文件名	 *	 * @param name	 * @return	 */	public static String getLastName(String name) {		int lastIndexOf = 0;		try {			lastIndexOf = name.lastIndexOf('/');		} catch (Exception e) {			e.printStackTrace();		}		return !name.equals("") ? name.substring(lastIndexOf + 1) : "";	}		/**	 * 创建保存文件的文件夹	 * @param fullName	带文件名的文件路径	 * @return	 */	public static void creatFolder(String fullName) {		if (FileUtil.getLastName(fullName).contains(".")) {			String newFilePath = fullName.substring(0, fullName.lastIndexOf('/'));			File file = new File(newFilePath);			if (!file.exists())				file.mkdirs();		}	}		/*********************文件夹操作***********************/	/**	 * 创建文件夹	 * @param path	 * @return	 */	public static void addFile(String path){		File mFile = new File(path);				if (!mFile.exists()){			mFile.mkdirs();		}	} 		/**	 * 获取文件夹下的所有文件	 * @param mFile	 * @param mListFile	 */	public static void getFiles(File mFile, List<String> mListFile){		File files[] = mFile.listFiles();		        if(files != null && files.length > 0){              for (File f : files){               	mListFile.add(f.getName());             }          }	}		/**	 * 递归获取某文件夹下所有的文件，不含文件夹	 * @param mFile	 * @param mListFile	 * @return	 */	public static void getAllFiles(File mFile, List<String> mListFile){		File files[] = mFile.listFiles();		        if(files != null && files.length > 0){              for (File f : files){                  if(f.isDirectory()){                	getAllFiles(f, mListFile);                }else{                  	mListFile.add(f.getName());                  }              }          }	}		/**      * 递归删除 文件/文件夹      * @param file      */     public static void deleteFile(File file) {          if (file.exists()) {              if (file.isFile()) {                  file.delete();              } else if (file.isDirectory()) {                  File files[] = file.listFiles();                  for (int i = 0; i < files.length; i++) {                      deleteFile(files[i]);                  }              }              file.delete();          }     }}