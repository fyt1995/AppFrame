package com.appframe.utils;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.drawable.Drawable;import android.os.AsyncTask;import android.widget.ImageView;/** * Image tools * @author arvin * */public class ImageUtil {	public static Drawable getImageAsDrawable(Context mContext, int id){		Drawable mDrawable = null;		try{			mDrawable = mContext.getResources().getDrawable(id);		}		catch(Exception e){			e.printStackTrace();		}				return mDrawable;	}		/**	 * 此方法用来异步加载图片	 * @param imageview	 * @param path	 */	public static void downloadAsyncTask(final ImageView imageview, final String path) {		new AsyncTask<String, Void, Bitmap>() {			@Override			protected Bitmap doInBackground(String... params) {				return getBitmap(path);			}			@Override			protected void onPostExecute(Bitmap result) {				super.onPostExecute(result);				if (result != null && imageview != null) {					imageview.setImageBitmap(result);				} else {				}			}		}.execute(new String[] {});	}	/**	 * 判断图片是否存在，否则从网络下载	 * @param 该图片的网络路径	 */	public static Bitmap getBitmap(String urlPath) {		Bitmap bitmap = null;		String fullName = urlPath;		if (FileUtil.judgeExists(fullName)) {			/* 存在就直接使用 */			bitmap = BitmapFactory.decodeFile(fullName);		} else {			/* 去下载图片,下载完成之后返回该对象 */			bitmap = downloadFile(urlPath, fullName);		}		return bitmap;	}	/**	 * 通过网络下载图片	 * @param url		下载路径	 * @param fullName	文件保存路径+文件名	 * @return	 */	private static Bitmap downloadFile(String url, String path) {		Bitmap bitmap = downloadBitmap(url);				// 判断是否挂载了sdcard, 是保存图片, 否则紧返回BitMap		if (BaseAppUtil.existSDCard()) {			if (bitmap != null) {				saveBitmap(path, bitmap);			}		} else {		}		return bitmap;	}		public static void downloadFile(String url) {		String fullName = url;		if (!FileUtil.judgeExists(fullName)) {			Bitmap bitmap = downloadBitmap(url);						// 判断是否挂载了sdcard, 是保存图片, 否则紧返回BitMap			if (BaseAppUtil.existSDCard()) {				if (bitmap != null) {					saveBitmap(fullName, bitmap);				}			} else {			}				bitmap = null;		}	}		/**	 * 下载图片	 * @param urlPath	 * @return	 */	private static Bitmap downloadBitmap(String url) {		try {			byte[] byteData = downloanFileAsByte(url);						return byteToBitmap(byteData);		} catch (Exception e) {			e.printStackTrace();			return null;		}	}	/**	 * 保存图片	 *	 * @param fullName	 * @param bitmap	 */	private static void saveBitmap(String fullName, Bitmap bitmap) {		if (bitmap != null) {			try {				File file = new File(fullName);				if (!file.exists()) {					FileUtil.creatFolder(fullName);					file.createNewFile();				}				FileOutputStream fos = new FileOutputStream(file);				bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);				fos.flush();			} catch (IOException e) {				e.printStackTrace();			}		} else {		}	}			/*************************图片下载*****************************/		/**	 * 获取图片的byte数组	 *	 * @param urlPath	 * @return	 */	private static byte[] downloanFileAsByte(String urlPath) {		InputStream in = null;		byte[] result = null;		try {			URL url = new URL(urlPath);			HttpURLConnection httpURLconnection = (HttpURLConnection) url.openConnection();			httpURLconnection.setDoInput(true);			httpURLconnection.connect();			if (httpURLconnection.getResponseCode() == 200) {				in = httpURLconnection.getInputStream();				result = StringUtil.InputStreamToByte(in);				in.close();			} else {			}		} catch (IOException e){		} catch (Exception e) {			e.printStackTrace();		} finally {			if (in != null) {				try {					in.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}				return result;	}		/**	 * byteToBitmap	 * @param byteData	 * @return	 */	public static Bitmap byteToBitmap(byte[] byteData){		Bitmap mBitmap = null;				if (byteData == null) {			return null;		}				int len = byteData.length;//		BitmapFactory.Options options = new BitmapFactory.Options();//		options.inPreferredConfig = Bitmap.Config.RGB_565;//		options.inPurgeable = true;//		options.inInputShareable = true;//		options.inJustDecodeBounds = false;//		if (len > 200000) {// 大于200K的进行压缩处理//			options.inSampleSize = 2;//		}		mBitmap = BitmapFactory.decodeByteArray(byteData, 0, len);				return mBitmap;	}		public static byte[] Bitmap2Bytes(Bitmap bm) {		ByteArrayOutputStream baos = new ByteArrayOutputStream();		bm.compress(Bitmap.CompressFormat.PNG, 100, baos);		return baos.toByteArray();	}		public static Bitmap Bytes2Bimap(byte[] b) {        if (b.length != 0) {            return BitmapFactory.decodeByteArray(b, 0, b.length);        } else {            return null;        }    }		public static Bitmap zoomBitmap(Bitmap bitmap, int width, int height) {        int w = bitmap.getWidth();        int h = bitmap.getHeight();        Matrix matrix = new Matrix();        float scaleWidth = ((float) width / w);        float scaleHeight = ((float) height / h);        matrix.postScale(scaleWidth, scaleHeight);        Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);        return newbmp;    }}